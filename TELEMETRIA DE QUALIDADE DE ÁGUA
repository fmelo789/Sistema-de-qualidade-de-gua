#include "DHT.h"
#include <OneWire.h>
#include <LiquidCrystal_I2C.h>
#include <DallasTemperature.h>
#include <WiFi.h>
#include <Firebase_ESP_Client.h>
#include "time.h"

#include "addons/TokenHelper.h"
// Provide the RTDB payload printing info and other helper functions.
#include "addons/RTDBHelper.h"

#define DHTPIN 4     // pino DHT sensor
#define TdsSensorPin 35  // pino do sensor tds
const int oneWireBus = 27;  // pino do sensor termopar
const int trigPin = 5;    // pinos do sensor ultrassonico
const int echoPin = 18;
const int pHSensorPin = 33;  // Substitua pelo pino ao qual o sensor de pH está conectado.


#define DHTTYPE DHT22   // DHT 22  (AM2302), AM2321
OneWire oneWire(oneWireBus);
DallasTemperature sensors(&oneWire);
LiquidCrystal_I2C lcd(0x27,20,4);
DHT dht(DHTPIN, DHTTYPE);

#define VREF 5.0              // analog reference voltage(Volt) of the ADC
#define SCOUNT  30            // sum of sample point
#define SOUND_VELOCITY 0.034

#ifdef USE_PULSE_OUT
  #include "do_iso_grav.h"       
  Gravity_DO_Isolated DO = Gravity_DO_Isolated(13);         
#else
  #include "do_grav.h"
  Gravity_DO DO = Gravity_DO(13);
#endif

/*************************************************/
#define WIFI_SSID "I9ENG. [CORPORATIVO]"        // trocar o nome e a senha do wifi de acordo com o local
#define WIFI_PASSWORD "********"
#define API_KEY "AIzaSyCgcjaAD2VRXvc6xQyS74-cwATRzUm3tsg"
#define USER_EMAIL "fabiano88874@gmail.com"
#define USER_PASSWORD "********"
#define DATABASE_URL "https://esp32-app-8f9a1-default-rtdb.firebaseio.com"

float temperature, tempAgua, humidity, oxigenio, salinidade, volume, ph;

FirebaseData fbdo;
FirebaseAuth auth;
FirebaseConfig config;

String uid;

String databasePath;

String tempPath = "/temperature";
String humPath = "/humidity";
String oxPath = "/oxigenio";
String tempAguaPath = "/tempAgua";
String salPath = "/salinidade";
String phPath = "/ph";
String volPath = "/volume";
String timePath = "/timestamp";
String parentPath;

int timestamp;
FirebaseJson json;

const char* ntpServer = "pool.ntp.org";


/********************  VARIAVEIS *****************************/

float Volume;
long duration;
float distanceCm;
float temperatureC;
int analogBuffer[SCOUNT];     // store the analog value in the array, read from ADC
int analogBufferTemp[SCOUNT];
int analogBufferIndex = 0;
int copyIndex = 0;
int total = 60;        // se for em cm deixar em decimal 
int raio = 20;          // se for medidas em metros alterar para valor inteiro
float averageVoltage = 0;
float tdsValue = 0;
float h,t;
float temperature_compensation = 25;
float pHValue = 0.0;
float valor_calibracao = 15.4;
float media;
float soma_tensao = 0;
float valor_pH;
unsigned long tempo;        // Float tempo
float nivelDO;
uint8_t user_bytes_received = 0;
const uint8_t bufferlen = 32;
char user_data[bufferlen];
float entrada_PH;


void setup() {

  Serial.begin(9600);
  initWiFi();
  lcd.init(); 
  lcd.backlight();
  pinMode(TdsSensorPin,INPUT);
  pinMode(trigPin, OUTPUT); // Sets the trigPin as an Output
  pinMode(echoPin, INPUT); // Sets the echoPin as an Input
  dht.begin();
  init_DO_Sensor();
  sensors.begin();  
  init_firebase();
  delay(2000);

}

void loop() {
  
  get_values_tds();      // pega os valores do sensor TDS 
  get_values_dht();      // pega os valores do sensor DHT22 
  get_data_DO();      // pega os valores do sensor OXIGENIO DISSOLVIDO 
  get_values_Ultrassonic();      // pega os valores do sensor ULTRASSONICO 
  get_values_termopar();      // pega os valores do sensor TERMOPAR 
  get_values_ph();      // pega os valores do sensor PH 
  send_data();      // manda os valores para o banco de dados 
  
  print_values();      // mostra os valores no monitor serial 

  msg1();            /// aqui aparece as mensagens no display
  lcd.clear();      // limpa o display
  msg2();
  lcd.clear();   
  msg3();
  lcd.clear();

  delay(15000);

}

//*********** função para o sensor termopar ********//

void get_values_termopar(){
  sensors.requestTemperatures(); 
  temperatureC = sensors.getTempCByIndex(0);

}

//*********** função para o sensor DHT22 ********//

void get_values_dht(){

  // Reading temperature or humidity takes about 250 milliseconds!
  // Sensor readings may also be up to 2 seconds 'old' (its a very slow sensor)
   h = dht.readHumidity();
  // Read temperature as Celsius (the default)
   t = dht.readTemperature();


  // Check if any reads failed and exit early (to try again).
  if (isnan(h) || isnan(t)) {
    Serial.println(F("Failed to read from DHT sensor!"));
    return;
  }

}


void print_values(){
  Serial.print(F("Humidity: "));
  Serial.print(h);
  Serial.println(" %");
  Serial.print(F("Temperatura: "));
  Serial.print(t);
  Serial.println(F("°C "));

  Serial.print("Volume : ");
  Serial.print(Volume);
  Serial.println(" L");

  Serial.print("temp agua: ");
  Serial.print(temperatureC);

    Serial.print("PH: ");
  Serial.print(valor_pH, 1);         // Escreve o pH com uma casa decimal

  Serial.print("oxigenio: ");
  Serial.print(nivelDO);

  Serial.print("salinidade: ");
  Serial.print(tdsValue, 0);
}


//*********** funções para o sensor de salinidade ********//


int getMedianNum(int bArray[], int iFilterLen){
  int bTab[iFilterLen];
  for (byte i = 0; i<iFilterLen; i++)
  bTab[i] = bArray[i];
  int i, j, bTemp;
  for (j = 0; j < iFilterLen - 1; j++) {
    for (i = 0; i < iFilterLen - j - 1; i++) {
      if (bTab[i] > bTab[i + 1]) {
        bTemp = bTab[i];
        bTab[i] = bTab[i + 1];
        bTab[i + 1] = bTemp;
      }
    }
  }
  if ((iFilterLen & 1) > 0){
    bTemp = bTab[(iFilterLen - 1) / 2];
  }
  else {
    bTemp = (bTab[iFilterLen / 2] + bTab[iFilterLen / 2 - 1]) / 2;
  }
  return bTemp;
}

void get_values_tds(){
  static unsigned long analogSampleTimepoint = millis();
  if(millis()-analogSampleTimepoint > 40U){     //every 40 milliseconds,read the analog value from the ADC
    analogSampleTimepoint = millis();
    analogBuffer[analogBufferIndex] = analogRead(TdsSensorPin);    //read the analog value and store into the buffer
    analogBufferIndex++;
    if(analogBufferIndex == SCOUNT){ 
      analogBufferIndex = 0;
    }
  }   
  
  static unsigned long printTimepoint = millis();
  if(millis()-printTimepoint > 800U){
    printTimepoint = millis();
    for(copyIndex=0; copyIndex<SCOUNT; copyIndex++){
      analogBufferTemp[copyIndex] = analogBuffer[copyIndex];
      
      // read the analog value more stable by the median filtering algorithm, and convert to voltage value
      averageVoltage = getMedianNum(analogBufferTemp,SCOUNT) * (float)VREF / 1024.0;
      
      //temperature compensation formula: fFinalResult(25^C) = fFinalResult(current)/(1.0+0.02*(fTP-25.0)); 
      float compensationCoefficient = 1.0+0.02*(temperature_compensation-25.0);
      //temperature compensation
      float compensationVoltage=averageVoltage/compensationCoefficient;
      
      //convert voltage value to tds value
      tdsValue=(133.42*compensationVoltage*compensationVoltage*compensationVoltage - 255.86*compensationVoltage*compensationVoltage + 857.39*compensationVoltage)*0.5;

    }
  }
}

//*********** função para o sensor ultrassonico para informar o volume ********//

void get_values_Ultrassonic(){
  digitalWrite(trigPin, LOW);
  delayMicroseconds(2);
  // Sets the trigPin on HIGH state for 10 micro seconds
  digitalWrite(trigPin, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPin, LOW);
  
  // Reads the echoPin, returns the sound wave travel time in microseconds
  duration = pulseIn(echoPin, HIGH);
  
  // Calculate the distance
  distanceCm = duration * SOUND_VELOCITY/2;
  Volume = ((3.1415)*(raio*raio)*(total-distanceCm))/1000;
}

//*********** função para o sensor de ph ********//

void get_values_ph(){
  int sensorValue = analogRead(pHSensorPin);

  // Convertendo o valor lido para pH (este é apenas um exemplo, os valores reais podem variar)
  pHValue = (sensorValue * 5) / 1024.0;  // Supondo que o sensor de pH tenha uma faixa de 0 a 14.
  media = pHValue/10;
  valor_pH = -5.75 * media + valor_calibracao;


}


//*********** função para inicializar a conexão com wifi ********//
void initWiFi() {
  WiFi.begin(WIFI_SSID, WIFI_PASSWORD);
  Serial.print("Connecting to WiFi ..");
  while (WiFi.status() != WL_CONNECTED) {
    Serial.print('.');
    delay(1000);
  }
  Serial.println(WiFi.localIP());
  Serial.println();
}

// Function that gets current epoch time
unsigned long getTime() {
  time_t now;
  struct tm timeinfo;
  if (!getLocalTime(&timeinfo)) {
    //Serial.println("Failed to obtain time");
    return(0);
  }
  time(&now);
  return now;
}

//*********** funções para iniciar e enviar os dados para o banco de dados ********//

void init_firebase(){
  configTime(0, 0, ntpServer);

  config.api_key = API_KEY;

  auth.user.email = USER_EMAIL;
  auth.user.password = USER_PASSWORD;

  config.database_url = DATABASE_URL;

  Firebase.reconnectWiFi(true);
  fbdo.setResponseSize(4096);

  config.token_status_callback = tokenStatusCallback; //see addons/TokenHelper.h

  config.max_token_generation_retry = 5;

  Firebase.begin(&config, &auth);

  Serial.println("Getting User UID");
  while ((auth.token.uid) == "") {
    Serial.print('.');
    delay(1000);
  }
  // Print user UID
  uid = auth.token.uid.c_str();
  Serial.print("User UID: ");
  Serial.println(uid);

  databasePath = "/UsersData/" + uid + "/readings";

}


void send_data(){
  if (Firebase.ready()){
  
    //Get current timestamp
    timestamp = getTime();
    Serial.print ("time: ");
    Serial.println (timestamp);

    parentPath= databasePath + "/" + String(timestamp);

    json.set(tempPath.c_str(), String(t));  //temp
    json.set(humPath.c_str(), String(h));  //umidade
    json.set(tempAguaPath.c_str(), String(temperatureC));  //temp agua
    json.set(salPath.c_str(), String(tdsValue));  //salinidade
    json.set(oxPath.c_str(), String(nivelDO));  //oxigenio
    json.set(phPath.c_str(), String(valor_pH));  // ph
    json.set(volPath.c_str(), String(Volume));  // volume
    json.set(timePath, String(timestamp));
    Serial.printf("Set json... %s\n", Firebase.RTDB.setJSON(&fbdo, parentPath.c_str(), &json) ? "ok" : fbdo.errorReason().c_str());
  }

}


//*********** função para o sensor de oxigenio ********//
void init_DO_Sensor(){
  delay(200);
  Serial.println(F("Use command \"CAL\" to calibrate the circuit to 100% saturation in air\n\"CAL,CLEAR\" clears the calibration"));
  if(DO.begin()){
    Serial.println("Loaded EEPROM");
  }
}

void get_data_DO(){
  if (Serial.available()>0){
    user_bytes_received = Serial.readBytesUntil(13, user_data, sizeof(user_data));
  }

  if (user_bytes_received){
    parse_cmd(user_data);
    user_bytes_received = 0;
    memset(user_data, 0, sizeof(user_data));
  }
  nivelDO = (DO.read_do_percentage())/10;
}

void parse_cmd(char* string) {
  strupr(string);
  String cmd = String(string);
  if(cmd.startsWith("CAL")){
    int index = cmd.indexOf(',');
    if(index != -1){
      String param = cmd.substring(index+1, cmd.length());
      if(param.equals("CLEAR")){
        DO.cal_clear();
       // Serial.println("CALIBRATION CLEARED");
      }
    }
    else{
      DO.cal();
      //Serial.println("DO CALIBRATED");
    }
  }
}
//*********** funções para mostrar os valores no display ********//

void msg1(){
  lcd.setCursor(0, 0); // centralizando
  lcd.print("Sistema de Qualidade");
  lcd.setCursor(0, 1);
  lcd.print("Temp da agua:");
  lcd.setCursor(14, 1);
  lcd.print(temperatureC);
  lcd.setCursor(0, 2);
  lcd.print("Temp ambiente:");
  lcd.setCursor(14, 2);
  lcd.print(t);
  lcd.setCursor(0,3);
  lcd.print("Saturacao:");
  lcd.setCursor(14, 3);
  lcd.print(nivelDO);
  delay(5000);
}

void msg2(){
  lcd.setCursor(0, 0); // centralizando
  lcd.print("Sistema de Qualidade");
  lcd.setCursor(0, 1);
  lcd.print("Salinidade:");
  lcd.setCursor(14, 1);
  lcd.print(tdsValue);
  lcd.setCursor(0, 2);
  lcd.print("Volume:");
  lcd.setCursor(14, 2);
  lcd.print(Volume);
  lcd.setCursor(0,3);
  lcd.print("PH:");
  lcd.setCursor(14, 3);
  lcd.print(valor_pH);
  delay(5000);
}

void msg3(){
  lcd.setCursor(0, 0); // centralizando
  lcd.print("Sistema de Qualidade");
  lcd.setCursor(0, 1);
  lcd.print("Umidade:");
  lcd.setCursor(14, 1);
  lcd.print(h);
  delay(5000);
}



